From 0faedc4a81f420520cfb8277f19204e2b9cc0880 Mon Sep 17 00:00:00 2001
From: antik9 <illarionovanton@gmail.com>
Date: Sun, 18 Mar 2018 14:13:03 +0000
Subject: [PATCH] Add LOAD_OTUS opcode

---
 Include/opcode.h        |  1 +
 Lib/opcode.py           |  1 +
 Python/ceval.c          | 18 ++++++++++++++++++
 Python/opcode_targets.h |  2 +-
 Python/peephole.c       | 11 ++++++++++-
 opcode.patch            |  0
 6 files changed, 31 insertions(+), 2 deletions(-)
 create mode 100644 opcode.patch

diff --git a/Include/opcode.h b/Include/opcode.h
index 9ed5487..a615735 100644
--- a/Include/opcode.h
+++ b/Include/opcode.h
@@ -158,6 +158,7 @@ extern "C" {
 
 #define SET_ADD         146
 #define MAP_ADD         147
+#define LOAD_OTUS	148
 
 
 enum cmp_op {PyCmp_LT=Py_LT, PyCmp_LE=Py_LE, PyCmp_EQ=Py_EQ, PyCmp_NE=Py_NE, PyCmp_GT=Py_GT, PyCmp_GE=Py_GE,
diff --git a/Lib/opcode.py b/Lib/opcode.py
index e403365..d2a1229 100644
--- a/Lib/opcode.py
+++ b/Lib/opcode.py
@@ -188,5 +188,6 @@ def_op('EXTENDED_ARG', 145)
 EXTENDED_ARG = 145
 def_op('SET_ADD', 146)
 def_op('MAP_ADD', 147)
+def_op('LOAD_OTUS', 148)
 
 del def_op, name_op, jrel_op, jabs_op
diff --git a/Python/ceval.c b/Python/ceval.c
index b55b4d6..0480000 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -1232,6 +1232,24 @@ PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
             break;
         }
 
+        /* LOAD_OTUS target */
+        TARGET(LOAD_OTUS)
+        {
+            x = GETLOCAL(0);
+            if (x != NULL) {
+                Py_INCREF(x);
+                PUSH(x);
+                x = GETITEM(consts, oparg);
+                Py_INCREF(x);
+                PUSH(x);
+                FAST_DISPATCH();
+            }
+            format_exc_check_arg(PyExc_UnboundLocalError,
+                UNBOUNDLOCAL_ERROR_MSG,
+                PyTuple_GetItem(co->co_varnames, oparg));
+            break;
+        }
+
         TARGET(LOAD_CONST)
         {
             x = GETITEM(consts, oparg);
diff --git a/Python/opcode_targets.h b/Python/opcode_targets.h
index 95eb127..8c29b98 100644
--- a/Python/opcode_targets.h
+++ b/Python/opcode_targets.h
@@ -147,7 +147,7 @@ static void *opcode_targets[256] = {
     &&TARGET_EXTENDED_ARG,
     &&TARGET_SET_ADD,
     &&TARGET_MAP_ADD,
-    &&_unknown_opcode,
+    &&TARGET_LOAD_OTUS,
     &&_unknown_opcode,
     &&_unknown_opcode,
     &&_unknown_opcode,
diff --git a/Python/peephole.c b/Python/peephole.c
index 11f6f88..c97b1e1 100644
--- a/Python/peephole.c
+++ b/Python/peephole.c
@@ -411,6 +411,15 @@ PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names,
                 cumlc = lastlc + 1;
                 break;
 
+	    /* Optimized LOAD_FAST operation for condition whether next operation is LOAD_CONST with zero value */
+	    case LOAD_FAST:
+		j = GETARG(codestr, i);
+		if (codestr[i + 3] == LOAD_CONST && j == 0) {
+			codestr[i + 3] = LOAD_OTUS;
+			memset(codestr + i, NOP, 3);
+		}
+		break;
+
                 /* Skip over LOAD_CONST trueconst
                    POP_JUMP_IF_FALSE xx. This improves
                    "while 1" performance. */
@@ -424,7 +433,7 @@ PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names,
                 memset(codestr+i, NOP, 6);
                 cumlc = 0;
                 break;
-
+			
                 /* Try to fold tuples of constants (includes a case for lists
                    which are only used for "in" and "not in" tests).
                    Skip over BUILD_SEQN 1 UNPACK_SEQN 1.
diff --git a/opcode.patch b/opcode.patch
new file mode 100644
index 0000000..e69de29
-- 
1.8.3.1

